import { tags } from '@angular-devkit/core';
import { chain, noop, Rule, SchematicContext } from '@angular-devkit/schematics';
import { bold } from '@colors/colors';
import {
    application, ChainableProjectContext, getSchematicSchemaDefaultOptions, logAction,
    logError, modifyJsonFile, replaceInFile, schematic
} from '@hug/ngx-schematics-utilities';
import { JSONFile } from '@schematics/angular/utility/json-file';

import { dedent } from '../utils/dedent';
import { InstallOptions } from './install-options';

const getActualUserConfig = async (context: SchematicContext, options: InstallOptions): Promise<InstallOptions> => {
    const defaultOptions = await getSchematicSchemaDefaultOptions(context, 'install');

    const config: InstallOptions = {
        project: 'app-test',
        authorityUrl: options.authorityUrl,
        clientId: options.clientId
    };
    (['loginRequired', 'loadUserSession', 'loadUserInfo'] as (keyof InstallOptions)[]).forEach(name => {
        if (options[name] !== defaultOptions[name]) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
            (config as any)[name] = options[name];
        }
    });
    return config;
};

export default (options: InstallOptions): Rule =>
    schematic('ngx-auth', [
        application(options.project)
            // Add 'crypto-js' as an allowed common-js dependency
            .rule((context: ChainableProjectContext) => {
                const commonJsDepsPath = ['projects', context.project.name, 'architect', 'build', 'options', 'allowedCommonJsDependencies'];
                const commonJsDeps = new JSONFile(context.tree, 'angular.json').get(commonJsDepsPath) as string[] || [];
                if (!commonJsDeps.includes('crypto-js')) {
                    return modifyJsonFile('angular.json', commonJsDepsPath, [...commonJsDeps, 'crypto-js']);
                }
                return noop();
            })

            // Add assets to angular project
            .addAngularJsonAsset({
                'glob': '**/*',
                'input': 'node_modules/@badisi/ngx-auth/oidc/assets',
                'output': 'oidc/callback'
            })

            // Import 'AuthModule'
            .addImportToNgModule('__SRC__/app/app.module.ts', 'AuthModule', '@badisi/ngx-auth')

            // Initialize the library in main.ts
            .addImportToFile('__SRC__/main.ts', 'initAuth', '@badisi/ngx-auth')
            .rule(async (context: ChainableProjectContext) => {
                const rules = [];
                const mainTsPath = `${context.project.sourceRoot || 'src'}/main.ts`;
                const mainTsContent = context.tree.read(mainTsPath)?.toString('utf-8') || '';

                // Check if it's not already initialized
                if (!mainTsContent.match(/initAuth\({?.*}?\)/sm)) {
                    const initContent = dedent`
                        /**
                         * Auth configuration
                         * @see https://badisi.github.io/auth-js/site/docs/configuration
                         */
                        initAuth().then(authProvider => {
                          platformBrowserDynamic([
                            authProvider
                          ]).bootstrapModule(AppModule).catch(err => console.error(err));
                        }).catch(error => console.error(error));
                    `;

                    const patternToReplace = /platformBrowserDynamic\(.*\).*\.bootstrapModule\(.*AppModule.*\).*\.catch\(err => console\.error\(err\)\);/sm;
                    if (!mainTsContent.match(patternToReplace)) {
                        const conflictContent = `\n${tags.stripIndents`
                            <<<<<<< HEAD
                            =======
                            /*
                            // This code was auto-generated by '@badisi/ngx-auth' schematic.
                            // Unfortunately the schematic was not able to merged it with your current code.
                            // Please resolve it manually.
                        `}\n\n${initContent}\n*/\n>>>>>>>\n`;

                        rules.push(
                            replaceInFile(mainTsPath, /$/g, conflictContent),
                            logError(`There were some conflict during the installation, please have a look at ${bold('main.ts')} file and resolve it.`)
                        );
                    } else {
                        rules.push(replaceInFile(mainTsPath, patternToReplace, initContent));
                    }
                }

                // Update the configuration
                const config = await getActualUserConfig(context.schematicContext, options);
                const configContent = JSON.stringify(config, null, 2).replace(/"([^"]+)":/g, '$1:').replace(/"/g, '\'');
                rules.push(
                    replaceInFile(mainTsPath, /initAuth\((.*?)\)/sm, `initAuth(${configContent})`),
                    logAction(`Have a look at ${bold('main.ts')} file and update the ${bold('auth configuration')} according to your needs.`)
                );

                return chain(rules);
            })

            .toRule()
    ], options);
